# %% [markdown]
# # Modelos de Classifica√ß√£o

# %% [markdown]
# ## Introdu√ß√£o a modelos de classifica√ß√£o de dados em Machine Learning

# %% [markdown]
# Voc√™ sabe como funciona um modelo supervisionado de classifica√ß√£o em machine learning? Na aula de hoje vamos aprender a como criar um classificador autom√°tico e inteligente utilizando ferramentas de machine learning. Vamos l√°? üòÄ
# 
# Case: Classifica√ß√£o de insetos gafanhotos e esperan√ßas
# 
# Um certo cientista coletou dados de amostra sobre uma popula√ß√£o de insetos da esp√©cie gafanhoto e esperan√ßa para realizar um estudo e identificar uma forma de encontrar diferen√ßas entre os tipos de insetos analisando algumas das caracter√≠sticas presentes no corpo dos insetos.
# 
# Com base em suas pesquisas e an√°lises, o cientista identificou que as caracter√≠sticas do tamanho do abdom√™n e comprimento das antenas desses insetos podem ser um fator muito relevante para a identifica√ß√£o da esp√©cie.
# 
# O cientista precisa encontrar uma maneira de identificar de forma autom√°tica e precisa os padr√µes dessas caracter√≠sticas que podem classificar quando um inseto √© do tipo gafanhoto ou do tipo esperan√ßa.
# 
# Vamos aplicar machine learning para resolver esse problema?

# %%
import pandas as pd

# %%
dados = pd.read_csv('https://raw.githubusercontent.com/camimq/machine_learning_and_time_series/main/02_machine_learning_avancado/bases/gaf_esp.csv', sep = ';')

# %%
dados.head()

# %%
dados.describe()

# %%
dados.groupby('Esp√©cie').describe()

# %%
dados.plot.scatter(x='Comprimento do Abd√¥men', y='Comprimento das Antenas')

# %%
from sklearn.model_selection import train_test_split

# %%
x = dados[['Comprimento do Abd√¥men', 'Comprimento das Antenas']]
y = dados['Esp√©cie']

# %%
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=42)

# %%
list(y_train).count('Gafanhoto')

# %%
print("Total base de treino: ", len(x_train))
print("Total base de teste: ", len(y_test))

# %%
from sklearn.neighbors import KNeighborsClassifier

# %%
# Hiperparametro do nosos modelo √© o n√∫mero de vizinhos considerado (n_neighbors)
modelo_classificador = KNeighborsClassifier(n_neighbors=3)

# Est√° fazendo o treinamento do meu modelo de ML
modelo_classificador.fit(x_train, y_train)

# %%
# Comprimento AB: 8
# Comprimento AT: 6
modelo_classificador.predict([[8,6]])

# %%
from sklearn.metrics import accuracy_score

# %%
y_predito = modelo_classificador.predict(x_test)

# %%
accuracy_score(y_true = y_test, y_pred=y_predito)


